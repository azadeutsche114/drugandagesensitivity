import numpy as np
from random import randint
from sklearn.utils import shuffle
from sklearn.preprocessing import MinMaxScaler

for i in train_samples:
print(i)
    
train_labels                = np.array(train_labels)
train_samples               = np.array(train_samples)
train_labels, train_samples = shuffle(train_labels, train_samples)

scaler                      = MinMaxScaler(feature_range=(0,1))
scaler_train_samples        = scaler.fit_transform(train_samples.reshape(-1,1)) # reshape make a array into list (-1,1) make one list with all rows and one column

for i in scaler_train_samples:
print(i)

import tensorflow as tf 
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy

model = Sequential([
    Dense(units=16, input_shape=(1,), activation='relu'),
    Dense(units=32, activation='relu'),
    Dense(units=2, activation='Softmax')  
])

model.summary()

model.compile(optimizer=Adam(learning_rate=0.0001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x=scaler_train_samples, y=train_labels, batch_size=10, epochs=30, shuffle=True, verbose=2)

test_labels               = np.array(test_labels)
test_samples              = np.array(test_samples)
test_labels, test_samples = shuffle(test_labels, test_samples)

scaled_test_samples       = scaler.fit_transform(test_samples.reshape(-1,1))
predictions = model.predict(x=scaled_test_samples, batch_size=10, verbose=0)

for i in predictions:
print(i)

rounded_predictions = np.argmax(predictions, axis=1)

for i in rounded_predictions:
print(i)
    
%matplotlib inline 
from sklearn.metrics import confusion_matrix
import itertools
import matplotlib.pyplot as plt

cm = confusion_matrix(y_true=test_labels, y_pred=rounded_predictions)

# Building a confusion matrix

def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):
    
    """
    The function prints and plots the confusion matrix.
    Normalization can be applied by setting normalize=True.
    """
    
    plt.imshow(cm, interpolation='nearest', cmap=cmap) # imshow is used to display and fit image in python
    plt.title(title) # interpolation is a technique in Python used to estimate unknown data points between two known data points.
    plt.colorbar()
    tick_marks=np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)
    
    if normalize:
        cm = cm.astype('float')/cm.sum(axis=1)[:, np.newaxis] # :, np.newaxis makes data into column, 1D becomes 2d and 2d becomes 3d so on. 
        print("Normalized confusion matrix") # astype converts float into categorical type
    else:
        print('Confusion matrix, without normalization')
    
    print(cm)
    
    thresh = cm.max()/2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                horizontalalignment='center',
                color = 'white' if cm[i, j] > thresh else 'black')
                
    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

    cm_plot_labels = ['no_side_effects', 'had side effects']
    plot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')













































